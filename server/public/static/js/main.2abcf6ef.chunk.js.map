{"version":3,"sources":["theme.ts","redux/localStorage.ts","views/Home.tsx","views/Join.tsx","redux/index.ts","views/Game/phase/Active/Reading.tsx","views/Game/phase/Active/index.tsx","views/Game/phase/Canceled.tsx","views/Game/components/AdvancePhaseButton.tsx","views/Game/phase/Drafting.tsx","views/Game/phase/Ended.tsx","views/Game/phase/Registration/Settings.tsx","views/Game/phase/Registration/Register.tsx","views/Game/phase/Registration/Lobby.tsx","views/Game/phase/Registration/index.tsx","views/Game/phase/Writing/WriteCards.tsx","views/Game/phase/Writing/Lobby.tsx","views/Game/phase/Writing/index.tsx","views/Game/index.tsx","App.tsx","index.tsx","../../common/dest/index.js","../../common/dest/selectors.js","../../common/dest/mutations.js","../../common/dest/reducer.js"],"names":["theme","createMuiTheme","palette","primary","main","contrastText","secondary","typography","getPlayer","id","localStorage","getItem","name","Home","history","useHistory","createGame","useCallback","a","fetch","method","headers","body","JSON","stringify","hostId","response","json","gameCode","push","flexDirection","flex","padding","spacing","alignItems","justifyContent","Typography","variant","color","style","fontWeight","BlueText","Box","mb","Button","fullWidth","component","Link","to","onClick","styled","span","Join","useForm","mode","register","handleSubmit","formState","onSubmit","data","console","log","isValid","align","m","TextField","margin","placeholder","inputRef","required","maxLength","minLength","InputProps","inputProps","h3","textAlign","textTransform","type","disabled","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","useActionDispatch","useDispatch","useGameSelector","selector","useSelector","Reading","dispatch","roundNumber","game","round","number","nCards","Object","values","playerCards","flat","length","nCardsGuessed","keys","guessedCardIds","nCardsSkipped","turns","active","skippedCardIds","filter","cardId","nCardsRemaining","score","namesAre","teamNames","teams","activePlayer","team","playerId","selectActivePlayer","map","players","reduce","s","i","joiner","paused","isFresh","recap","settings","cards","selectCards","activeCard","activeCardId","skipCard","payload","drawSeed","Math","random","useCountdownTimer","timer","onTimerToggle","gotCard","timeRemaining","skipTurn","startTurn","lineHeight","width","marginRight","marginLeft","orange","blue","mt","skippedCardCount","skipPenalty","text","useState","setTimer","interval","useRef","useEffect","current","setInterval","t","clearInterval","Active","index","includes","turnDuration","Canceled","AdvancePhaseButton","phase","host","selectHost","isHost","errorMessage","advanceErrorMessage","isDisabled","message","hostMessage","firstTeam","player","selectNumberOfPlayers","Drafting","paddingBottom","onDragEnd","result","provided","draggableId","source","destination","droppableId","src","dst","nextTeams","splice","snapshot","TableContainer","Paper","innerRef","droppableProps","Table","aria-label","TableHead","background","TableRow","TableCell","fontSize","TableBody","key","Label","children","DraggableCell","isDragging","scope","square","elevation","draggableProps","opacity","dragHandleProps","ref","Ended","Settings","params","useRouteMatch","defaultValues","cardsPerPlayer","watch","onFormSubmit","parseInt","numberOfRounds","Header","Form","Row","htmlFor","min","endAdornment","InputAdornment","position","FormGroup","FormControlLabel","control","Switch","defaultChecked","label","form","Flex","divider","Register","setItem","setPlayerName","Lobby","match","url","orderedPlayers","selectOrderedPlayers","isMe","rulesDescription","join","removeFromGame","marginBottom","IconButton","Edit","Close","CopyGameCodeButton","highlighted","setHighlighted","timeout","copyGameCode","navigator","clipboard","writeText","location","href","clearTimeout","setTimeout","Registration","path","exact","placeholders","WriteCards","myCards","card","v4","Array","_","playerHasCards","Check","Writing","GameView","props","store","setStore","notFound","setNotFound","socket","io","query","cleanup","removeAllListeners","disconnect","_store","on","middleware","createStore","GameReducer","applyMiddleware","next","action","createGameStore","send","PhaseSwitcher","state","App","ThemeProvider","FourOhFour","ReactDOM","render","StrictMode","document","getElementById","__assign","assign","n","arguments","p","prototype","hasOwnProperty","call","apply","this","_a","flatMap","cardMap","sort","b","joinOrder","nextPlayerSameTeam","_b","nextIndex","nextTurn","drawNextCard","drawCardIds","unguessedSkipCardIds","floor","nextRoundNumber","nextPhase","nextRound","indexOf","__rest","e","getOwnPropertySymbols","propertyIsEnumerable","initialGame","endTurn","nextTeam","nextPlayerNextTeam","advanceFromRegistration","advanceFromWriting","advanceFromDrafting","setSettings","_c","_d","max","joinGame","leaveGame","submitCards","setTeams","pauseTurn"],"mappings":"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","file":"static/js/main.2abcf6ef.chunk.js","sourcesContent":["import { createMuiTheme } from \"@material-ui/core\";\n\nexport const theme = createMuiTheme({\n  palette: {\n    primary: { main: \"#2196f3\", contrastText: \"#fff\" },\n    secondary: { main: \"#fc7100\", contrastText: \"#fff\" },\n  },\n  typography: {\n    // fontFamily: '\"Helvetica\", \"Arial\", sans-serif',\n    // h1: {\n    //   fontFamily: '\"Palatino\", \"Times New Roman\", serif',\n    // },\n    // h2: {\n    //   fontFamily: '\"Palatino\", \"Times New Roman\", serif',\n    // },\n    // h3: {\n    //   fontFamily: '\"Palatino\", \"Times New Roman\", serif',\n    // },\n    // h4: {\n    //   fontFamily: '\"Palatino\", \"Times New Roman\", serif',\n    // },\n    // h5: {\n    //   fontFamily: '\"Palatino\", \"Times New Roman\", serif',\n    // },\n    // h6: {\n    //   fontFamily: '\"Palatino\", \"Times New Roman\", serif',\n    // },\n  },\n});\n\n/*\nTypography elements:\n\n- Logo\n- Page header\n- Button\n- Copy\n- Form Label\n- Helper text\n- Game Code\n*/\n","import { v4 } from \"uuid\";\n\nexport const initializePlayerId = () => {\n  if (localStorage.getItem(\"PLAYER_ID\") == null) {\n    localStorage.setItem(\"PLAYER_ID\", v4());\n  }\n};\n\nexport const setPlayerName = (name: string) => {\n  localStorage.setItem(\"PLAYER_NAME\", name);\n};\n\nexport const getPlayer = (): { id: string; name: string } => ({\n  id: localStorage.getItem(\"PLAYER_ID\") || \"\",\n  name: localStorage.getItem(\"PLAYER_NAME\") || \"\",\n});\n","import React, { useCallback } from \"react\";\nimport { Box, Typography, Button } from \"@material-ui/core\";\nimport { theme } from \"../theme\";\nimport { Flex } from \"@rebass/grid/emotion\";\nimport styled from \"@emotion/styled\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { getPlayer } from \"../redux/localStorage\";\n\nexport const Home: React.FC = () => {\n  const { id } = getPlayer();\n  const history = useHistory();\n  // TODO: deal with async / failure\n  const createGame = useCallback(async () => {\n    const response = await fetch(\"/create\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ hostId: id }),\n    });\n\n    const { gameCode } = await response.json();\n\n    history.push(`/games/${gameCode}`);\n  }, [history]);\n\n  return (\n    <Flex flexDirection=\"column\" flex=\"1 0 auto\" padding={theme.spacing(2)}>\n      <Flex flex=\"1 1 0%\"></Flex>\n      <Flex alignItems=\"center\" justifyContent=\"center\">\n        <Typography\n          variant=\"h2\"\n          color=\"secondary\"\n          style={{ fontWeight: \"bold\" }}\n        >\n          fish<BlueText>bowl</BlueText>\n        </Typography>\n      </Flex>\n      <Flex flex=\"2 2 0%\"></Flex>\n      <Flex flexDirection=\"column\">\n        <Box mb={2}>\n          <Button fullWidth variant=\"outlined\" component={Link} to=\"/join\">\n            Join Game\n          </Button>\n        </Box>\n        <Button\n          fullWidth\n          variant=\"outlined\"\n          color=\"primary\"\n          onClick={createGame}\n        >\n          Create New Game\n        </Button>\n      </Flex>\n      <Flex flex=\"1 1 0%\"></Flex>\n    </Flex>\n  );\n};\n\nconst BlueText = styled.span`\n  color: ${theme.palette.primary.main};\n`;\n","import React, { useCallback } from \"react\";\nimport { Box, Typography, Button, TextField } from \"@material-ui/core\";\nimport { theme } from \"../theme\";\nimport { Flex } from \"@rebass/grid/emotion\";\nimport styled from \"@emotion/styled\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { useForm } from \"react-hook-form\";\n\ninterface FormState {\n  gameCode: string;\n}\n\nexport const Join: React.FC = () => {\n  const { register, handleSubmit, formState } = useForm<FormState>({\n    mode: \"onChange\",\n  });\n  const history = useHistory();\n  const onSubmit = useCallback(\n    (data: FormState) => {\n      console.log(data);\n      history.push(`/games/${data.gameCode}`);\n    },\n    [history]\n  );\n\n  const { isValid } = formState;\n  console.log(isValid);\n\n  return (\n    <Flex flexDirection=\"column\" flex=\"1 0 auto\" padding={theme.spacing(2)}>\n      <Flex flex=\"1 1 0%\"></Flex>\n      <Flex flexDirection=\"column\">\n        <Typography variant=\"h2\" align=\"center\">\n          join a game\n        </Typography>\n        <Typography variant=\"body1\" align=\"center\">\n          Got a game code? Enter it here!\n        </Typography>\n        <Box m={4}></Box>\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <Typography variant=\"h5\">\n            <TextField\n              fullWidth\n              name=\"gameCode\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              placeholder=\"ABCD\"\n              inputRef={register({\n                required: true,\n                maxLength: 4,\n                minLength: 4,\n              })}\n              InputProps={{\n                inputProps: {\n                  style: {\n                    ...theme.typography.h3,\n                    textAlign: \"center\",\n                    fontWeight: \"bold\",\n                    textTransform: \"uppercase\",\n                  },\n                  maxLength: 4,\n                },\n              }}\n            ></TextField>\n          </Typography>\n          <Button\n            variant=\"outlined\"\n            color=\"primary\"\n            fullWidth\n            type=\"submit\"\n            disabled={!isValid}\n          >\n            Join Game\n          </Button>\n        </form>\n      </Flex>\n      <Flex flex=\"2 2 0%\"></Flex>\n    </Flex>\n  );\n};\n","import { Dispatch, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { createStore, Store, applyMiddleware, compose } from \"redux\";\nimport { Actions, Game, GameReducer } from \"@fishbowl/common\";\n\n//@ts-ignore: devtools setup\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport const createGameStore = (\n  game: Game,\n  middleware: (action: Actions) => void\n) => {\n  return createStore(\n    GameReducer,\n    game,\n    composeEnhancers(\n      applyMiddleware(() => (next) => (action: Actions) => {\n        middleware(action);\n        next(action);\n      })\n    )\n  );\n};\n\nexport const useActionDispatch = () => useDispatch<Dispatch<Actions>>();\nexport const useGameSelector = <TReturn>(selector: (g: Game) => TReturn) =>\n  useSelector<Game, TReturn>(selector);\n","import { Box, Button, Typography } from \"@material-ui/core\";\nimport { Flex } from \"@rebass/grid/emotion\";\nimport React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport { useActionDispatch, useGameSelector } from \"../../../../redux\";\nimport { selectActivePlayer, selectCards } from \"@fishbowl/common\";\nimport { getPlayer } from \"../../../../redux/localStorage\";\nimport { theme } from \"../../../../theme\";\n\nexport const Reading: React.FC = () => {\n  const { id } = getPlayer();\n  const dispatch = useActionDispatch();\n\n  const roundNumber = useGameSelector((game) => game.round.number);\n  const nCards = useGameSelector(\n    (game) => Object.values(game.playerCards).flat().length\n  );\n  const nCardsGuessed = useGameSelector(\n    (game) => Object.keys(game.round.guessedCardIds).length\n  );\n\n  // want to remove guessed cards from skipped cards\n  const nCardsSkipped = useGameSelector(\n    (game) =>\n      Object.keys(game.turns.active.skippedCardIds).filter(\n        (cardId) => !game.round.guessedCardIds[cardId]\n      ).length\n  );\n  const nCardsRemaining = nCards - nCardsGuessed - nCardsSkipped;\n  const score = useGameSelector((game) => game.score);\n  const namesAre = useGameSelector((game) => {\n    const teamNames = game.teams[game.activePlayer.team]\n      .filter((playerId) => playerId !== selectActivePlayer(game).id)\n      .map((playerId) => game.players[playerId].name);\n\n    return teamNames.reduce((s, name, i) => {\n      let joiner = \"\";\n      //if this is the last name in the list there is no joiner\n      if (i === teamNames.length - 1) {\n        if (teamNames.length === 1) {\n          joiner = \" is\";\n        } else {\n          joiner = \" are\";\n        }\n\n        // if this is second to last, we want an \"and\"\n      } else if (i === teamNames.length - 2) {\n        // oxford comma if we have 3+\n        if (teamNames.length > 2) {\n          joiner = \", and \";\n          // otherwise no commas\n        } else {\n          joiner = \" and \";\n        }\n        // just a comma\n      } else {\n        joiner = \", \";\n      }\n      return `${s}${name}${joiner}`;\n    }, \"\");\n  });\n  const paused = useGameSelector((game) => game.turns.active.paused);\n  const isFresh = useGameSelector((game) => game.turns.active.isFresh);\n  const recap = useGameSelector((game) => game.turns.recap);\n  const settings = useGameSelector((game) => game.settings);\n  const cards = useGameSelector(selectCards);\n  const activeCard = useGameSelector(\n    (game) => selectCards(game)[game.turns.active.activeCardId]\n  );\n\n  const skipCard = useCallback(() => {\n    if (activeCard == null) {\n      return;\n    }\n    dispatch({\n      type: \"SKIP_CARD\",\n      payload: { cardId: activeCard.id, drawSeed: Math.random() },\n    });\n  }, [dispatch, activeCard]);\n\n  const [timer, onTimerToggle] = useCountdownTimer();\n  const gotCard = useCallback(() => {\n    if (activeCard == null) {\n      return;\n    }\n    dispatch({\n      type: \"GOT_CARD\",\n      payload: {\n        cardId: activeCard.id,\n        // TODO: need to wire this up?\n        timeRemaining: timer,\n        drawSeed: Math.random(),\n      },\n    });\n  }, [dispatch, activeCard, timer]);\n\n  const skipTurn = useCallback(() => {\n    dispatch({ type: \"SKIP_TURN\", payload: {} });\n  }, [dispatch]);\n  const startTurn = useCallback(() => {\n    dispatch({ type: \"START_TURN\", payload: { drawSeed: Math.random() } });\n  }, [dispatch]);\n\n  return (\n    <Flex flexDirection=\"column\" flex=\"1 0 auto\" padding={theme.spacing(2)}>\n      <Flex flex=\"1 0 auto\" flexDirection=\"column\">\n        <Box m={1}>\n          <Typography variant=\"h4\" align=\"center\">\n            Round {roundNumber}\n          </Typography>\n        </Box>\n        <Flex margin={`${theme.spacing(1)}px`}>\n          <Flex flex=\"1 1 0%\" alignItems=\"center\" flexDirection=\"column\">\n            <Typography\n              style={{ fontWeight: 300, lineHeight: \"36px\" }}\n              color=\"textSecondary\"\n              variant=\"body1\"\n            >\n              Cards Left\n            </Typography>\n            <Flex width=\"100%\">\n              <Flex\n                flex=\"1 0 auto\"\n                justifyContent=\"flex-end\"\n                marginRight={`${theme.spacing(1)}px`}\n              >\n                <Typography variant=\"h6\">{nCardsRemaining}</Typography>\n              </Flex>\n              <Typography variant=\"h6\">/</Typography>\n              <Flex flex=\"1 0 auto\" marginLeft={`${theme.spacing(1)}px`}>\n                <Typography variant=\"h6\">{nCards}</Typography>\n              </Flex>\n            </Flex>\n            <Typography variant=\"caption\" color=\"textSecondary\">\n              &nbsp;{nCardsSkipped > 0 && `${nCardsSkipped} skipped`}&nbsp;\n            </Typography>\n          </Flex>\n          <Flex flex=\"1 1 0%\" alignItems=\"center\" flexDirection=\"column\">\n            <Typography\n              style={{ fontWeight: 300, lineHeight: \"36px\" }}\n              color=\"textSecondary\"\n              variant=\"body1\"\n            >\n              Score\n            </Typography>\n            <Flex width=\"100%\">\n              <Flex\n                flex=\"1 0 auto\"\n                justifyContent=\"flex-end\"\n                marginRight={`${theme.spacing(1)}px`}\n              >\n                <Typography variant=\"h6\" color=\"secondary\">\n                  {score.orange}\n                </Typography>\n              </Flex>\n              <Flex flex=\"1 0 auto\" marginLeft={`${theme.spacing(1)}px`}>\n                <Typography variant=\"h6\" color=\"primary\">\n                  {score.blue}\n                </Typography>\n              </Flex>\n            </Flex>\n          </Flex>\n        </Flex>\n        <Box m={1}>\n          <Typography align=\"center\">{namesAre} guessing for you.</Typography>\n        </Box>\n        <Box mb={1}>\n          <Button variant=\"outlined\" fullWidth onClick={onTimerToggle}>\n            <Flex flexDirection=\"column\" alignItems=\"center\">\n              <Typography\n                variant=\"caption\"\n                align=\"center\"\n                color=\"textSecondary\"\n              >\n                Time Remaining\n              </Typography>\n              <Typography\n                variant=\"h2\"\n                style={{ fontWeight: \"bold\" }}\n                color=\"textSecondary\"\n              >\n                {timer}\n              </Typography>\n            </Flex>\n          </Button>\n        </Box>\n        <Box mb={2} mt={2} padding={4}>\n          {isFresh ? (\n            recap == null ? null : (\n              <Flex flexDirection=\"column\">\n                <Typography variant=\"h6\" align=\"center\">\n                  {recap.team} team got{\" \"}\n                  {recap.guessedCardIds.length +\n                    recap.skippedCardCount * settings.skipPenalty}{\" \"}\n                  points.\n                </Typography>\n                {recap.guessedCardIds.map((cardId) => (\n                  <Typography>{cards[cardId].text}</Typography>\n                ))}\n              </Flex>\n            )\n          ) : paused ? (\n            <Typography variant=\"h4\" color=\"secondary\" align=\"center\">\n              PAUSED\n            </Typography>\n          ) : (\n            <Typography variant=\"h4\" align=\"center\">\n              {activeCard?.text}\n            </Typography>\n          )}\n        </Box>\n      </Flex>\n      {paused ? (\n        isFresh ? (\n          <Flex>\n            <Flex flex=\"1 1 0%\" marginRight={`${theme.spacing(1)}px`}>\n              <Button fullWidth variant=\"outlined\" onClick={skipTurn}>\n                Skip Turn\n              </Button>\n            </Flex>\n            <Flex flex=\"1 1 0%\" marginLeft={`${theme.spacing(1)}px`}>\n              <Button\n                fullWidth\n                variant=\"outlined\"\n                color=\"primary\"\n                onClick={startTurn}\n              >\n                Start Turn\n              </Button>\n            </Flex>\n          </Flex>\n        ) : (\n          <Flex>\n            <Flex flex=\"2 2 0%\" marginLeft={`${theme.spacing(1)}px`}>\n              <Button\n                fullWidth\n                variant=\"outlined\"\n                color=\"primary\"\n                onClick={startTurn}\n              >\n                Resume Turn\n              </Button>\n            </Flex>\n          </Flex>\n        )\n      ) : (\n        <Flex>\n          <Flex flex=\"1 1 0%\" marginRight={`${theme.spacing(1)}px`}>\n            <Button\n              fullWidth\n              variant=\"outlined\"\n              onClick={skipCard}\n              disabled={nCardsRemaining === 0 && nCardsSkipped <= 1}\n            >\n              Skip\n            </Button>\n          </Flex>\n          <Flex flex=\"2 2 0%\" marginLeft={`${theme.spacing(1)}px`}>\n            <Button\n              fullWidth\n              variant=\"outlined\"\n              color=\"primary\"\n              onClick={gotCard}\n            >\n              Got it!\n            </Button>\n          </Flex>\n        </Flex>\n      )}\n    </Flex>\n  );\n};\n\nconst Label: React.FC = ({ children }) => (\n  <Typography\n    style={{ fontWeight: 300, lineHeight: \"36px\" }}\n    color=\"textSecondary\"\n    variant=\"h6\"\n  >\n    {children}\n  </Typography>\n);\n\nconst useCountdownTimer = (): [number, VoidFunction] => {\n  const dispatch = useActionDispatch();\n  const paused = useGameSelector((game) => game.turns.active.paused);\n  const timeRemaining = useGameSelector(\n    (game) => game.turns.active.timeRemaining\n  );\n  const [timer, setTimer] = useState(timeRemaining);\n  const interval = useRef<number>();\n\n  useEffect(() => {\n    setTimer(timeRemaining);\n    if (!paused) {\n      interval.current = window.setInterval(() => {\n        setTimer((t) => t - 1);\n      }, 1000);\n    }\n\n    return () => {\n      clearInterval(interval.current);\n    };\n  }, [paused, timeRemaining]);\n\n  useEffect(() => {\n    if (timer < 0) {\n      dispatch({ type: \"END_TURN\", payload: {} });\n    }\n  }, [dispatch, timer]);\n\n  const onClick = useCallback(() => {\n    if (paused) {\n      dispatch({ type: \"START_TURN\", payload: { drawSeed: Math.random() } });\n    } else {\n      dispatch({ type: \"PAUSE_TURN\", payload: { timeRemaining: timer } });\n    }\n  }, [dispatch, timer, paused]);\n\n  return [timer, onClick];\n};\n","import React from \"react\";\nimport { useGameSelector } from \"../../../../redux\";\nimport { getPlayer } from \"../../../../redux/localStorage\";\nimport { Reading } from \"./Reading\";\n\nexport const Active: React.FC = () => {\n  const { id } = getPlayer();\n  const teams = useGameSelector((game) => game.teams);\n  const activePlayer = useGameSelector((game) => game.activePlayer);\n  const activeTurn = useGameSelector((game) => game.turns.active);\n\n  const isReading =\n    teams[activePlayer.team][activePlayer.index[activePlayer.team]] === id;\n  const isGuessing = teams[activePlayer.team].includes(id);\n  const isTurnFresh = useGameSelector(\n    (game) =>\n      game.turns.active.paused &&\n      game.turns.active.timeRemaining === game.settings.turnDuration\n  );\n\n  // If turn is fresh, Reading player should be able to skip or start their turn\n\n  return <Reading></Reading>;\n};\n","import React from \"react\";\n\nexport const Canceled: React.FC = () => {\n  return <div></div>;\n};\n","import { Button } from \"@material-ui/core\";\nimport React, { useCallback } from \"react\";\nimport { useActionDispatch, useGameSelector } from \"../../../redux\";\nimport {\n  Game,\n  GamePhase,\n  selectHost,\n  selectNumberOfPlayers,\n} from \"@fishbowl/common\";\nimport { getPlayer } from \"../../../redux/localStorage\";\n\nexport const AdvancePhaseButton: React.FC = () => {\n  const { id } = getPlayer();\n  const phase = useGameSelector((game) => game.phase);\n  const game = useGameSelector((game) => game);\n  const host = useGameSelector(selectHost);\n  const dispatch = useActionDispatch();\n\n  const isHost = host?.id === id;\n  const errorMessage = advanceErrorMessage(game, phase);\n  const isDisabled = errorMessage != null || !isHost;\n  const message =\n    errorMessage ||\n    (isHost ? hostMessage(phase) : `${host?.name} will start the game...`);\n\n  const onClick = useCallback(() => {\n    if (phase === \"registration\") {\n      const firstTeam = Math.random() > 0.5 ? \"orange\" : \"blue\";\n      const teams = Object.values(game.players).reduce(\n        (teams, player, i) => {\n          const team = i % 2 === 0 ? \"orange\" : \"blue\";\n          teams[team].push(player.id);\n\n          return teams;\n        },\n        {\n          orange: [],\n          blue: [],\n        } as Game[\"teams\"]\n      );\n\n      dispatch({\n        type: \"ADVANCE_FROM_REGISTRATION\",\n        payload: { teams, firstTeam },\n      });\n    }\n    if (phase === \"writing\") {\n      dispatch({\n        type: \"ADVANCE_FROM_WRITING\",\n        payload: {},\n      });\n    }\n    if (phase === \"drafting\") {\n      dispatch({\n        type: \"ADVANCE_FROM_DRAFTING\",\n        payload: {},\n      });\n    }\n  }, [dispatch, phase, game]);\n\n  return (\n    <Button\n      fullWidth\n      variant=\"outlined\"\n      color=\"primary\"\n      disabled={isDisabled}\n      onClick={onClick}\n    >\n      {message}\n    </Button>\n  );\n};\n\nexport const advanceErrorMessage = (\n  game: Game,\n  phase: GamePhase\n): string | null => {\n  if (phase === \"registration\") {\n    // requires at least 4 players\n    if (selectNumberOfPlayers(game) < 4) {\n      return \"Waiting for 4 players...\";\n    }\n    return null;\n  }\n  if (phase === \"writing\") {\n    // TODO: how many cards are required to advance?\n    if (Object.keys(game.playerCards).length < 1) {\n      return \"Waiting for everyone's cards...\";\n    }\n\n    return null;\n  }\n  if (phase === \"drafting\") {\n    // all players must be assigned to a team\n    const { orange, blue } = game.teams;\n    if (orange.length < 2 || blue.length < 2) {\n      return \"Teams must have 2 players...\";\n    }\n\n    // initialize turn order state\n    return null;\n  }\n\n  return null;\n};\n\nconst hostMessage = (phase: GamePhase) => {\n  switch (phase) {\n    case \"registration\":\n      return \"Everyone is here!\";\n    case \"writing\":\n      return \"Choose Teams!\";\n    case \"drafting\":\n      return \"Start Game!\";\n  }\n  return \"\";\n};\n\nconst phaseOrder: GamePhase[] = [\n  \"registration\",\n  \"writing\",\n  \"drafting\",\n  \"active\",\n];\nconst nextPhase = (phase: GamePhase) => {\n  const i = phaseOrder.indexOf(phase);\n  return phaseOrder[i + 1];\n};\n","import {\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Typography,\n} from \"@material-ui/core\";\nimport { Flex } from \"@rebass/grid/emotion\";\nimport React from \"react\";\nimport {\n  DragDropContext,\n  Draggable,\n  Droppable,\n  DropResult,\n  ResponderProvided,\n} from \"react-beautiful-dnd\";\nimport { useActionDispatch, useGameSelector } from \"../../../redux\";\nimport { Player, TeamName } from \"@fishbowl/common\";\n\nimport { getPlayer } from \"../../../redux/localStorage\";\nimport { theme } from \"../../../theme\";\nimport { AdvancePhaseButton } from \"../components/AdvancePhaseButton\";\n\n/*\nMake color neutral when dragging or change when crossing borders\nTry different list border colors\nThink about List with and without borders across this and the lobby\n*/\nexport const Drafting: React.FC = () => {\n  const { id } = getPlayer();\n\n  const players = useGameSelector((game) => game.players);\n  const teams = useGameSelector((game) => game.teams);\n  const dispatch = useActionDispatch();\n\n  const onDragEnd = (result: DropResult, provided: ResponderProvided) => {\n    console.log(result);\n    const { draggableId, source, destination } = result;\n    if (destination?.droppableId == null) {\n      return;\n    }\n    if (\n      source.droppableId === destination.droppableId &&\n      source.index === destination.index\n    ) {\n      return;\n    }\n\n    const src = source.droppableId as TeamName;\n    const dst = destination.droppableId as TeamName;\n    const nextTeams = {\n      orange: [...teams.orange],\n      blue: [...teams.blue],\n    };\n    nextTeams[src].splice(source.index, 1);\n    nextTeams[dst].splice(destination.index, 0, draggableId);\n\n    dispatch({ type: \"SET_TEAMS\", payload: { teams: nextTeams } });\n  };\n\n  return (\n    <Flex flexDirection=\"column\" flex=\"1 0 auto\" padding={theme.spacing(2)}>\n      <Flex\n        flex=\"1 0 auto\"\n        flexDirection=\"column\"\n        paddingBottom={theme.spacing(2)}\n      >\n        <Flex alignItems=\"center\" justifyContent=\"space-between\">\n          <Label>Choose Your Teams...</Label>\n        </Flex>\n        <Flex>\n          <DragDropContext onDragEnd={onDragEnd}>\n            <Flex flex=\"1 1 0%\" marginRight={2}>\n              <Droppable droppableId=\"orange\">\n                {(provided, snapshot) => (\n                  <TableContainer\n                    component={Paper}\n                    innerRef={provided.innerRef}\n                    {...provided.droppableProps}\n                  >\n                    <Table aria-label=\"Players\">\n                      <TableHead\n                        style={{ background: theme.palette.secondary.main }}\n                      >\n                        <TableRow>\n                          <TableCell\n                            style={{\n                              color: theme.palette.secondary.contrastText,\n                              fontSize: 16,\n                              fontWeight: \"bold\",\n                            }}\n                          >\n                            Orange\n                          </TableCell>\n                        </TableRow>\n                      </TableHead>\n                      <TableBody>\n                        {teams.orange.map((playerId, i) => (\n                          <TableRow key={playerId}>\n                            <DraggableCell\n                              player={players[playerId]}\n                              index={i}\n                            ></DraggableCell>\n                          </TableRow>\n                        ))}\n                        {provided.placeholder}\n                      </TableBody>\n                    </Table>\n                  </TableContainer>\n                )}\n              </Droppable>\n            </Flex>\n            <Flex flex=\"1 1 0%\" marginLeft={2}>\n              <Droppable droppableId=\"blue\">\n                {(provided, snapshot) => (\n                  <TableContainer\n                    component={Paper}\n                    innerRef={provided.innerRef}\n                    {...provided.droppableProps}\n                  >\n                    <Table aria-label=\"Players\">\n                      <TableHead\n                        style={{\n                          background: theme.palette.primary.main,\n                        }}\n                      >\n                        <TableRow>\n                          <TableCell\n                            style={{\n                              color: theme.palette.primary.contrastText,\n                              fontSize: 16,\n                              fontWeight: \"bold\",\n                            }}\n                          >\n                            Blue\n                          </TableCell>\n                        </TableRow>\n                      </TableHead>\n                      <TableBody>\n                        {teams.blue.map((playerId, i) => (\n                          <TableRow key={playerId}>\n                            <DraggableCell\n                              player={players[playerId]}\n                              index={i}\n                            ></DraggableCell>\n                          </TableRow>\n                        ))}\n                        {provided.placeholder}\n                      </TableBody>\n                    </Table>\n                  </TableContainer>\n                )}\n              </Droppable>\n            </Flex>\n          </DragDropContext>\n        </Flex>\n      </Flex>\n      <Flex>\n        <AdvancePhaseButton></AdvancePhaseButton>\n      </Flex>\n    </Flex>\n  );\n};\n\nconst Label: React.FC = ({ children }) => (\n  <Typography\n    style={{ fontWeight: 300, lineHeight: \"36px\" }}\n    color=\"textSecondary\"\n    variant=\"h6\"\n  >\n    {children}\n  </Typography>\n);\n\nconst DraggableCell: React.FC<{ player: Player; index: number }> = ({\n  player,\n  index,\n}) => {\n  return (\n    <Draggable key={player.id} draggableId={player.id} index={index}>\n      {(provided, snapshot) => {\n        console.log(snapshot.isDragging);\n        return (\n          <TableCell\n            scope=\"row\"\n            component={Paper}\n            //@ts-ignore\n            square\n            elevation={snapshot.isDragging ? 2 : 0}\n            {...provided.draggableProps}\n            style={{\n              ...provided.draggableProps.style,\n              opacity: snapshot.isDragging ? 0.7 : 1,\n            }}\n            {...provided.dragHandleProps}\n            ref={provided.innerRef}\n          >\n            {player.name}\n          </TableCell>\n        );\n      }}\n    </Draggable>\n  );\n};\n","import React from \"react\";\n\nexport const Ended: React.FC = () => {\n  return <div>Game over, man</div>;\n};\n","import styled from \"@emotion/styled\";\nimport {\n  Box,\n  Button,\n  FormControlLabel,\n  FormGroup,\n  InputAdornment,\n  Switch,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport { Flex } from \"@rebass/grid/emotion\";\nimport React, { useCallback } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useSelector } from \"react-redux\";\nimport { useHistory, useRouteMatch } from \"react-router-dom\";\nimport { useActionDispatch } from \"../../../../redux\";\nimport { Game } from \"@fishbowl/common\";\n\nimport { theme } from \"../../../../theme\";\n\ninterface FormState {\n  turnDuration: string;\n  skipPenalty: boolean;\n  cardsPerPlayer: string;\n}\n\nexport const Settings: React.FC = () => {\n  const settings = useSelector((game: Game) => game.settings);\n  const dispatch = useActionDispatch();\n  const history = useHistory();\n  const { params } = useRouteMatch<{ gameCode: string }>();\n\n  const { register, handleSubmit, watch } = useForm<FormState>({\n    defaultValues: {\n      turnDuration: `${settings.turnDuration}`,\n      cardsPerPlayer: `${settings.cardsPerPlayer}`,\n      skipPenalty: settings.skipPenalty === -1,\n    },\n  });\n\n  const skipPenalty = watch(\"skipPenalty\");\n\n  const onFormSubmit = useCallback(\n    (formState: FormState) => {\n      dispatch({\n        type: \"SET_GAME_SETTINGS\",\n        payload: {\n          settings: {\n            turnDuration: parseInt(formState.turnDuration),\n            cardsPerPlayer: parseInt(formState.cardsPerPlayer),\n            skipPenalty: formState.skipPenalty ? -1 : 0,\n            numberOfRounds: settings.numberOfRounds,\n          },\n        },\n      });\n\n      history.push(`/games/${params.gameCode}`);\n    },\n    [dispatch, history, settings, params]\n  );\n\n  return (\n    <Flex flexDirection=\"column\" flex=\"1 0 auto\" padding={theme.spacing(2)}>\n      <Header>\n        <Typography variant=\"h4\" align=\"center\">\n          game rules\n        </Typography>\n      </Header>\n      <Form onSubmit={handleSubmit(onFormSubmit)}>\n        <Flex flex=\"1 0 auto\" flexDirection=\"column\">\n          <Row>\n            <Typography\n              variant=\"body1\"\n              style={{ fontWeight: \"bold\" }}\n              component=\"label\"\n              htmlFor=\"turnDuration\"\n            >\n              Time Per Turn\n            </Typography>\n            <Typography\n              variant=\"body2\"\n              style={{ fontWeight: \"lighter\" }}\n              component=\"label\"\n              htmlFor=\"turnDuration\"\n            >\n              how much time does each player get on their turn?\n            </Typography>\n            <Box width=\"6em\">\n              <TextField\n                id=\"turnDuration\"\n                name=\"turnDuration\"\n                type=\"number\"\n                variant=\"outlined\"\n                margin=\"dense\"\n                inputRef={register({ required: true, min: 1 })}\n                InputProps={{\n                  endAdornment: (\n                    <InputAdornment position=\"end\">s</InputAdornment>\n                  ),\n                  inputProps: {\n                    required: true,\n                    min: 1,\n                  },\n                }}\n              ></TextField>\n            </Box>\n          </Row>\n          <Row>\n            <Typography\n              variant=\"body1\"\n              style={{ fontWeight: \"bold\" }}\n              component=\"label\"\n              htmlFor=\"cardsPerPlayer\"\n            >\n              Cards Per Player\n            </Typography>\n            <Typography\n              variant=\"body2\"\n              style={{ fontWeight: \"lighter\" }}\n              component=\"label\"\n              htmlFor=\"cardsPerPlayer\"\n            >\n              how many cards will each player need to fill out?\n            </Typography>\n            <Box width=\"6em\">\n              <TextField\n                id=\"cardsPerPlayer\"\n                name=\"cardsPerPlayer\"\n                type=\"number\"\n                variant=\"outlined\"\n                margin=\"dense\"\n                inputRef={register({ required: true, min: 1 })}\n                InputProps={{\n                  inputProps: {\n                    required: true,\n                    min: 1,\n                  },\n                }}\n              ></TextField>\n            </Box>\n          </Row>\n          <Row>\n            <Typography\n              variant=\"body1\"\n              style={{ fontWeight: \"bold\" }}\n              component=\"label\"\n              htmlFor=\"skipPenalty\"\n            >\n              Skip Penalty\n            </Typography>\n            <Typography\n              variant=\"body2\"\n              style={{ fontWeight: \"lighter\" }}\n              component=\"label\"\n              htmlFor=\"skipPenalty\"\n            >\n              players lose a point (-1) for their team when they skip a card\n            </Typography>\n            <FormGroup>\n              <FormControlLabel\n                control={\n                  <Switch\n                    id=\"skipPenalty\"\n                    name=\"skipPenalty\"\n                    defaultChecked={skipPenalty}\n                    inputRef={register}\n                  />\n                }\n                label={skipPenalty ? \"-1 per skip\" : \"no penalty\"}\n              />\n            </FormGroup>\n          </Row>\n        </Flex>\n        <Flex>\n          <Button variant=\"outlined\" color=\"primary\" fullWidth type=\"submit\">\n            Save\n          </Button>\n        </Flex>\n      </Form>\n    </Flex>\n  );\n};\n\nconst Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  flex: 1 0 auto;\n`;\n\nconst Header = styled(Flex)`\n  border-bottom: 1px solid ${theme.palette.divider};\n  padding-bottom: ${theme.spacing(1)}px;\n  margin-bottom: ${theme.spacing(2)}px;\n`;\n\nconst Row = styled(Flex)`\n  flex-direction: column;\n  margin-bottom: ${theme.spacing(2)}px;\n`;\n","import { Box, Button, TextField, Typography } from \"@material-ui/core\";\nimport { Flex } from \"@rebass/grid/emotion\";\nimport React, { useCallback } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useHistory, useRouteMatch } from \"react-router-dom\";\nimport { useActionDispatch } from \"../../../../redux\";\nimport { getPlayer, setPlayerName } from \"../../../../redux/localStorage\";\nimport { theme } from \"../../../../theme\";\n\ninterface FormState {\n  name: string;\n}\n\nexport const Register: React.FC = () => {\n  const { id, name } = getPlayer();\n  // TODO: read identity & username from cookie\n  const { register, handleSubmit, formState } = useForm<FormState>({\n    mode: \"onChange\",\n    defaultValues: {\n      name,\n    },\n  });\n\n  const dispatch = useActionDispatch();\n  const history = useHistory();\n  const { params } = useRouteMatch<{ gameCode: string }>();\n\n  const onFormSubmit = useCallback(\n    ({ name }: FormState) => {\n      dispatch({\n        type: \"JOIN_GAME\",\n        payload: { playerId: id, name },\n      });\n      setPlayerName(name);\n      history.push(`/games/${params.gameCode}`);\n    },\n    [history, dispatch, id, params]\n  );\n\n  const { isValid } = formState;\n\n  return (\n    <Flex flexDirection=\"column\" flex=\"1 0 auto\" padding={theme.spacing(2)}>\n      <Flex flex=\"1 1 0%\"></Flex>\n      <Flex flexDirection=\"column\">\n        <Typography variant=\"h2\" align=\"center\">\n          Your Name\n        </Typography>\n        <Typography variant=\"body1\" align=\"center\">\n          Tell everyone who you are!\n        </Typography>\n        <Box m={4}></Box>\n        <form onSubmit={handleSubmit(onFormSubmit)}>\n          <Typography variant=\"h5\">\n            <TextField\n              fullWidth\n              name=\"name\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              placeholder=\"ABCD\"\n              inputRef={register({\n                required: true,\n              })}\n              InputProps={{\n                inputProps: {\n                  style: {\n                    textAlign: \"center\",\n                    fontSize: theme.spacing(4),\n                  },\n                },\n              }}\n            ></TextField>\n          </Typography>\n          <Button\n            variant=\"outlined\"\n            color=\"primary\"\n            fullWidth\n            type=\"submit\"\n            disabled={!isValid}\n          >\n            Save\n          </Button>\n        </form>\n      </Flex>\n      <Flex flex=\"2 2 0%\"></Flex>\n    </Flex>\n  );\n};\n","import styled from \"@emotion/styled\";\nimport {\n  Box,\n  Button,\n  IconButton,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableRow,\n  Typography,\n} from \"@material-ui/core\";\nimport { Close, Edit, Settings } from \"@material-ui/icons\";\nimport { Flex } from \"@rebass/grid/emotion\";\nimport React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport { Link, Redirect, useRouteMatch } from \"react-router-dom\";\nimport { useActionDispatch, useGameSelector } from \"../../../../redux\";\nimport { selectOrderedPlayers } from \"@fishbowl/common\";\n\nimport { getPlayer } from \"../../../../redux/localStorage\";\nimport { theme } from \"../../../../theme\";\nimport { AdvancePhaseButton } from \"../../components/AdvancePhaseButton\";\n\nexport const Lobby: React.FC = () => {\n  const { id, name } = getPlayer();\n\n  const dispatch = useActionDispatch();\n  const match = useRouteMatch<{\n    gameCode: string;\n  }>();\n  const { url } = match;\n\n  const hostId = useGameSelector((game) => game.hostId);\n  const orderedPlayers = useGameSelector(selectOrderedPlayers);\n  const isHost = id === hostId;\n  const isMe = useCallback((playerId: string) => id === playerId, [id]);\n\n  const rulesDescription = useGameSelector((game) => {\n    const {\n      cardsPerPlayer,\n      numberOfRounds,\n      skipPenalty,\n      turnDuration,\n    } = game.settings;\n\n    return [\n      `${numberOfRounds} rounds`,\n      `${cardsPerPlayer} cards per player`,\n      `${turnDuration} second turns`,\n      `skips are ${skipPenalty === -1 ? \"-1 points\" : \"free\"}`,\n    ].join(\", \");\n  });\n\n  useEffect(() => {\n    dispatch({ type: \"JOIN_GAME\", payload: { playerId: id, name } });\n  }, [dispatch, id, name]);\n\n  const removeFromGame = useCallback(\n    (playerId) => {\n      dispatch({ type: \"LEAVE_GAME\", payload: { playerId } });\n    },\n    [dispatch]\n  );\n\n  if (name === \"\") {\n    return (\n      <Redirect to={`/games/${match.params.gameCode}/register`}></Redirect>\n    );\n  }\n\n  return (\n    <Flex flexDirection=\"column\" flex=\"1 0 auto\" padding={theme.spacing(2)}>\n      <Flex flexDirection=\"column\" marginBottom={`${theme.spacing(2)}px`}>\n        <Label>Game Lobby</Label>\n        <CopyGameCodeButton\n          gameCode={match.params.gameCode}\n        ></CopyGameCodeButton>\n        {isHost && (\n          <Typography variant=\"caption\">\n            You are the host. Use this invite link to let your friends join. You\n            will control this game's rules and when the game starts. Have fun!\n          </Typography>\n        )}\n      </Flex>\n      <Flex flexDirection=\"column\" marginBottom={`${theme.spacing(2)}px`}>\n        <Flex alignItems=\"center\" justifyContent=\"space-between\">\n          <Label>Rules</Label>\n          {isHost && (\n            <IconButton\n              component={Link}\n              to={`${url}/settings`}\n              // style={{ marginRight: 16 }}\n            >\n              <Settings></Settings>\n            </IconButton>\n          )}\n        </Flex>\n        <Typography variant=\"caption\">{rulesDescription}</Typography>\n      </Flex>\n\n      <Flex flex=\"1 0 auto\" flexDirection=\"column\">\n        <Flex alignItems=\"center\" justifyContent=\"space-between\">\n          <Label>Players</Label>\n        </Flex>\n        <TableContainer component={Paper}>\n          <Table aria-label=\"Players\">\n            <TableBody>\n              {orderedPlayers.map((player, i) => (\n                <TableRow key={player.id}>\n                  <TableCell scope=\"row\">{i + 1}</TableCell>\n                  <TableCell scope=\"row\" style={{ width: \"100%\" }}>\n                    {player.name || \"...\"}\n                  </TableCell>\n                  <TableCell align=\"right\">\n                    {isMe(player.id) ? (\n                      <IconButton\n                        component={Link}\n                        to={`${url}/register`}\n                        style={{ margin: \"-16px\" }}\n                      >\n                        <Edit></Edit>\n                      </IconButton>\n                    ) : (\n                      isHost && (\n                        <IconButton\n                          onClick={() => removeFromGame(player.id)}\n                          style={{ margin: \"-16px\" }}\n                        >\n                          <Close></Close>\n                        </IconButton>\n                      )\n                    )}\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </Flex>\n      <Flex>\n        <AdvancePhaseButton></AdvancePhaseButton>\n      </Flex>\n    </Flex>\n  );\n};\n\nconst CopyGameCodeButton: React.FC<{ gameCode: string }> = ({ gameCode }) => {\n  const [highlighted, setHighlighted] = useState(false);\n  const timeout = useRef<number>();\n\n  const copyGameCode = useCallback(() => {\n    navigator.clipboard.writeText(window.location.href);\n    setHighlighted(true);\n    clearTimeout(timeout.current);\n    timeout.current = window.setTimeout(() => setHighlighted(false), 1500);\n  }, []);\n\n  return (\n    <Box mb={1}>\n      <Button\n        variant=\"outlined\"\n        fullWidth\n        onClick={copyGameCode}\n        color=\"secondary\"\n      >\n        <Flex flexDirection=\"column\" alignItems=\"center\">\n          <Typography variant=\"h5\">{gameCode}</Typography>\n          <Typography variant=\"caption\" align=\"center\">\n            {highlighted ? \"copied!\" : \"copy invite link\"}\n          </Typography>\n        </Flex>\n      </Button>\n    </Box>\n  );\n};\n\nconst Label: React.FC = ({ children }) => (\n  <Typography\n    style={{ fontWeight: 300, lineHeight: \"36px\" }}\n    color=\"textSecondary\"\n    variant=\"h6\"\n  >\n    {children}\n  </Typography>\n);\n\nconst Header = styled(Flex)`\n  flex-direction: column;\n  border-bottom: 1px solid ${theme.palette.divider};\n  padding-bottom: ${theme.spacing(1)}px;\n  margin-bottom: ${theme.spacing(2)}px;\n`;\n","import React from \"react\";\nimport { Switch, Route, useRouteMatch } from \"react-router\";\nimport { Settings } from \"./Settings\";\nimport { Register } from \"./Register\";\nimport { Lobby } from \"./Lobby\";\n\nexport const Registration: React.FC = () => {\n  const { path } = useRouteMatch();\n  return (\n    <Switch>\n      <Route path={`${path}/settings`} exact component={Settings}></Route>\n      <Route path={`${path}/register`} exact component={Register}></Route>\n      <Route path={path} component={Lobby}></Route>\n    </Switch>\n  );\n};\n","import React, { useCallback } from \"react\";\nimport { Box, Typography, Button, TextField } from \"@material-ui/core\";\nimport { theme } from \"../../../../theme\";\nimport { Flex } from \"@rebass/grid/emotion\";\nimport styled from \"@emotion/styled\";\nimport { Link, useHistory, useRouteMatch } from \"react-router-dom\";\nimport { useForm } from \"react-hook-form\";\nimport { useActionDispatch, useGameSelector } from \"../../../../redux\";\nimport { getPlayer } from \"../../../../redux/localStorage\";\nimport { v4 } from \"uuid\";\n\nconst placeholders = [\"Darth Vader\", \"Arachnophobia\", \"Band Camp\"];\n\ninterface FormState {\n  cards: string[];\n}\n\nexport const WriteCards: React.FC = () => {\n  const { id } = getPlayer();\n  const dispatch = useActionDispatch();\n  const history = useHistory();\n  const { params } = useRouteMatch<{ gameCode: string }>();\n\n  const cardsPerPlayer = useGameSelector(\n    (game) => game.settings.cardsPerPlayer\n  );\n  const myCards = useGameSelector((game) => game.playerCards[id] || []);\n  // TODO: read identity & username from cookie\n  const { register, handleSubmit, formState } = useForm<FormState>({\n    mode: \"onChange\",\n    defaultValues: {\n      cards: myCards.map((card) => card.text),\n    },\n  });\n\n  const onSubmit = useCallback(\n    ({ cards }: FormState) => {\n      dispatch({\n        type: \"SUBMIT_CARDS\",\n        payload: {\n          playerId: id,\n          cards: cards.map((text) => ({\n            id: v4(),\n            text,\n          })),\n        },\n      });\n      history.push(`/games/${params.gameCode}`);\n    },\n    [history, dispatch, id, params]\n  );\n\n  const { isValid } = formState;\n\n  return (\n    <Flex flexDirection=\"column\" flex=\"1 0 auto\" padding={theme.spacing(2)}>\n      <Typography variant=\"h2\">Write Your Cards</Typography>\n      <Typography variant=\"caption\">\n        Using the words and phrases everyone writes on their cards, you will\n        take turns giving clues and getting your team to guess what is on the\n        cards. A good card will be a word or phrase that everyone in your group\n        will know and understand. Be creative and think about how you can get\n        some laughs!\n      </Typography>\n      <Box m={4}></Box>\n      <Form onSubmit={handleSubmit(onSubmit)}>\n        {[...Array(cardsPerPlayer)].map((_, i) => {\n          console.log(i);\n          return (\n            <Row key={i}>\n              <Typography\n                variant=\"body1\"\n                style={{ fontWeight: \"bold\" }}\n                component=\"label\"\n                htmlFor={`cards[${i}]`}\n              >\n                Card #{i + 1}\n              </Typography>\n              <TextField\n                fullWidth\n                id={`cards[${i}]`}\n                name={`cards[${i}]`}\n                margin=\"dense\"\n                variant=\"outlined\"\n                placeholder={placeholders[i] || \"...\"}\n                inputRef={register({\n                  required: true,\n                })}\n              ></TextField>\n            </Row>\n          );\n        })}\n\n        <Flex flex=\"1 1 0%\"></Flex>\n        <Button\n          variant=\"outlined\"\n          color=\"primary\"\n          fullWidth\n          type=\"submit\"\n          disabled={!isValid}\n        >\n          Ready!\n        </Button>\n      </Form>\n    </Flex>\n  );\n};\n\nconst Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  flex: 1 0 auto;\n`;\n\nconst Row = styled(Flex)`\n  flex-direction: column;\n  margin-bottom: ${theme.spacing(2)}px;\n`;\n","import {\n  IconButton,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableRow,\n  Typography,\n} from \"@material-ui/core\";\nimport { Check, Edit } from \"@material-ui/icons\";\nimport { Flex } from \"@rebass/grid/emotion\";\nimport React, { useCallback } from \"react\";\nimport { Link, Redirect, useRouteMatch } from \"react-router-dom\";\nimport { useGameSelector } from \"../../../../redux\";\nimport { selectOrderedPlayers } from \"@fishbowl/common\";\n\nimport { getPlayer } from \"../../../../redux/localStorage\";\nimport { theme } from \"../../../../theme\";\nimport { AdvancePhaseButton } from \"../../components/AdvancePhaseButton\";\n\nexport const Lobby: React.FC = () => {\n  const { id } = getPlayer();\n\n  const { params } = useRouteMatch<{ gameCode: string }>();\n\n  const orderedPlayers = useGameSelector(selectOrderedPlayers);\n  const playerCards = useGameSelector((game) => game.playerCards);\n  const playerHasCards = useCallback(\n    (playerId: string) => playerCards[playerId] != null,\n    [playerCards]\n  );\n\n  if (playerCards[id] == null) {\n    return <Redirect to={`/games/${params.gameCode}/cards`}></Redirect>;\n  }\n\n  return (\n    <Flex flexDirection=\"column\" flex=\"1 0 auto\" padding={theme.spacing(2)}>\n      <Flex flex=\"1 0 auto\" flexDirection=\"column\">\n        <Flex alignItems=\"center\" justifyContent=\"space-between\">\n          <Label>Writing Cards...</Label>\n        </Flex>\n        <TableContainer component={Paper}>\n          <Table aria-label=\"Players\">\n            <TableBody>\n              {orderedPlayers.map((player, i) => (\n                <TableRow key={player.id}>\n                  <TableCell scope=\"row\" style={{ width: \"100%\" }}>\n                    {player.name}\n                  </TableCell>\n                  <TableCell align=\"right\">\n                    {player.id === id ? (\n                      <IconButton\n                        component={Link}\n                        to={`/games/${params.gameCode}/cards`}\n                        style={{ margin: \"-16px\" }}\n                      >\n                        <Edit></Edit>\n                      </IconButton>\n                    ) : (\n                      playerHasCards(player.id) && <Check></Check>\n                    )}\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </Flex>\n      <Flex>\n        <AdvancePhaseButton></AdvancePhaseButton>\n      </Flex>\n    </Flex>\n  );\n};\n\nconst Label: React.FC = ({ children }) => (\n  <Typography\n    style={{ fontWeight: 300, lineHeight: \"36px\" }}\n    color=\"textSecondary\"\n    variant=\"h6\"\n  >\n    {children}\n  </Typography>\n);\n","import React from \"react\";\nimport { Switch, Route, useRouteMatch } from \"react-router\";\nimport { WriteCards } from \"./WriteCards\";\nimport { Lobby } from \"./Lobby\";\n\nexport const Writing: React.FC = () => {\n  const { path } = useRouteMatch();\n\n  return (\n    <Switch>\n      <Route path={`${path}/cards`} exact component={WriteCards}></Route>\n      <Route path={path} component={Lobby}></Route>\n    </Switch>\n  );\n};\n","import { Actions, Game, ServerEvents } from \"@fishbowl/common\";\nimport React, { useEffect, useState } from \"react\";\nimport { Provider as ReduxProvider } from \"react-redux\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { Store } from \"redux\";\nimport io from \"socket.io-client\";\nimport { createGameStore, useGameSelector } from \"../../redux\";\nimport { Active } from \"./phase/Active\";\nimport { Canceled } from \"./phase/Canceled\";\nimport { Drafting } from \"./phase/Drafting\";\nimport { Ended } from \"./phase/Ended\";\nimport { Registration } from \"./phase/Registration\";\nimport { Writing } from \"./phase/Writing\";\n\n/*\nNotes for socket server:\n- Requests are pinned to servers by game id\n- Game states & their sockets are held in memory on servers, keyed by id\n  - When a server receives a request for a game, it checks if the game is already in memory\n    - If not, the game state is read out of the database, a new redux store is init'd with the game state\n      - If game is not in DB, 404 or equivalent down the socket. and reap?\n    - For each new socket connection, send init event with current game state.\n    - Subscribe to the store and push subsequent updates out onto the socket\n    - Subscribe to the store and write back to the db. DB writes are only for backup in case of server crash / game recovery.\n      - Need to check about how socket reconnects from client work on a server crash\n    - Listen on the sockets for events, and dispatch them onto the store\n    - Q: how are games reaped? Both in memory sessions, and db records. X time after ended? X time after last interaction? greater than 24 hr old?\n*/\n\nexport const GameView: React.FC<RouteComponentProps<{\n  gameCode: string;\n}>> = (props) => {\n  const [store, setStore] = useState<Store<Game, Actions> | null>(null);\n  const [notFound, setNotFound] = useState(false);\n  const { gameCode } = props.match.params;\n\n  useEffect(() => {\n    // TODO: namespace socket connection so that it can be sticky to server by gameCode\n    const socket = io(\"http://localhost:3001\", {\n      query: {\n        gameCode,\n      },\n    });\n\n    const cleanup = () => {\n      socket.removeAllListeners();\n      socket.disconnect();\n    };\n    let _store: Store<Game, Actions> | null = null;\n\n    socket.on(\"connect\", () => {\n      console.log(\"socket connect\");\n      socket.on(\"message\", (data: ServerEvents) => {\n        console.log(\"socket message\", data);\n        console.log(data);\n        if (data.type === \"SERVER_NOT_FOUND\") {\n          setNotFound(true);\n          cleanup();\n        }\n        // TODO: wire up\n        if (data.type === \"SERVER_INIT_STATE\") {\n          const game = data.payload;\n          _store = createGameStore(game, (action) => {\n            console.log(\"action middleware\", socket.send);\n            if (action.type === \"SERVER_UPDATE_STATE\") {\n              return;\n            }\n            socket.send(action);\n          });\n          setStore(_store);\n        }\n        if (data.type === \"SERVER_UPDATE_STATE\") {\n          _store?.dispatch(data);\n        }\n      });\n    });\n\n    // TODO: how do I clean up a socket?\n    return cleanup;\n  }, [gameCode]);\n\n  // const { id, name } = getPlayer();\n  // const store = useGameStore(\n  //   {\n  //     gameCode,\n  //     phase: \"active\",\n  //     activePlayer: {\n  //       team: \"orange\",\n  //       index: {\n  //         orange: 0,\n  //         blue: 0,\n  //       },\n  //     },\n  //     hostId: id,\n  //     players: {\n  //       [id]: {\n  //         id,\n  //         name,\n  //         joinOrder: 0,\n  //       },\n  //       1: {\n  //         id: \"1\",\n  //         name: \"Caitlin\",\n  //         joinOrder: 1,\n  //       },\n  //       2: {\n  //         id: \"2\",\n  //         name: \"Dan\",\n  //         joinOrder: 2,\n  //       },\n  //       3: {\n  //         id: \"3\",\n  //         name: \"Chris\",\n  //         joinOrder: 3,\n  //       },\n  //       4: {\n  //         id: \"4\",\n  //         name: \"Sarah\",\n  //         joinOrder: 4,\n  //       },\n  //     },\n  //     playerCards: {\n  //       [id]: [\n  //         {\n  //           id: \"0\",\n  //           text: \"Darth Vader\",\n  //         },\n  //         {\n  //           id: \"1\",\n  //           text: \"the cow jumped over the moon\",\n  //         },\n\n  //         {\n  //           id: \"2\",\n  //           text: \"the blue danube\",\n  //         },\n  //       ],\n  //     },\n  //     round: {\n  //       guessedCardIds: {},\n  //       number: 1,\n  //     },\n  //     score: {\n  //       orange: 0,\n  //       blue: 0,\n  //     },\n  //     settings: {\n  //       cardsPerPlayer: 3,\n  //       numberOfRounds: 3,\n  //       skipPenalty: -1,\n  //       turnDuration: 45,\n  //     },\n  //     teams: {\n  //       orange: [id, \"1\", \"2\"],\n  //       blue: [\"3\", \"4\"],\n  //     },\n  //     turns: {\n  //       active: {\n  //         isFresh: true,\n  //         paused: true,\n  //         activeCardId: \"\",\n  //         timeRemaining: 45,\n  //         guessedCardIds: {},\n  //         skippedCardIds: {},\n  //       },\n  //       recap: null,\n  //     },\n  //   }\n  //   // applyMiddleware(broadCastOverSocket)\n  // );\n\n  if (notFound) {\n    return <div>404 not found gameCode</div>;\n  }\n\n  if (store == null) {\n    return <div>loading...</div>;\n  }\n\n  return (\n    <ReduxProvider store={store}>\n      <PhaseSwitcher></PhaseSwitcher>\n    </ReduxProvider>\n  );\n};\n\nconst PhaseSwitcher: React.FC = () => {\n  const phase = useGameSelector((state) => state.phase);\n\n  switch (phase) {\n    case \"registration\":\n      return <Registration></Registration>;\n    case \"writing\":\n      return <Writing></Writing>;\n    case \"drafting\":\n      return <Drafting></Drafting>;\n    case \"active\":\n      return <Active></Active>;\n    case \"canceled\":\n      return <Canceled></Canceled>;\n    case \"ended\":\n      return <Ended></Ended>;\n  }\n};\n","import { ThemeProvider } from \"@material-ui/core\";\nimport React, { useEffect } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { theme } from \"./theme\";\nimport { Home } from \"./views/Home\";\nimport { Join } from \"./views/Join\";\nimport { GameView } from \"./views/Game\";\nimport { initializePlayerId } from \"./redux/localStorage\";\n\nexport const App = () => {\n  useEffect(() => {\n    initializePlayerId();\n  }, []);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Router>\n        <Switch>\n          <Route path=\"/\" exact component={Home}></Route>\n          <Route path=\"/join\" exact component={Join}></Route>\n          <Route path=\"/games/:gameCode\" component={GameView}></Route>\n          <Route path=\"/\" component={FourOhFour}></Route>\n        </Switch>\n      </Router>\n    </ThemeProvider>\n  );\n};\n\nconst FourOhFour = () => <div>404 NOT FOUND</div>;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","export * from './types';\nexport * from './selectors';\nexport * from './reducer';\n","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nexport var selectHost = function (game) {\n    var hostId = game.hostId, players = game.players;\n    return players[hostId];\n};\nexport var selectActivePlayer = function (game) {\n    var teams = game.teams, _a = game.activePlayer, team = _a.team, index = _a.index, players = game.players;\n    return players[teams[team][index[team]]];\n};\nexport var selectCards = function (game) {\n    return Object.values(game.playerCards)\n        .flatMap(function (cards) { return cards; })\n        .reduce(function (cardMap, card) {\n        var _a;\n        return __assign(__assign({}, cardMap), (_a = {}, _a[card.id] = card, _a));\n    }, {});\n};\nexport var selectNumberOfPlayers = function (game) {\n    return Object.keys(game.players).length;\n};\nexport var selectOrderedPlayers = function (game) {\n    return Object.values(game.players).sort(function (a, b) { return a.joinOrder - b.joinOrder; });\n};\n","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { selectCards } from \"./selectors\";\n// Updates activePlayer pointer to the next player on the next team\nexport function nextPlayerNextTeam(game) {\n    var team = game.activePlayer.team;\n    var nextTeam = team === \"blue\" ? \"orange\" : \"blue\";\n    return nextPlayerSameTeam(__assign(__assign({}, game), { activePlayer: __assign(__assign({}, game.activePlayer), { team: nextTeam }) }));\n}\n// Updates activePlayer pointer to the next player on the same team\nexport function nextPlayerSameTeam(game) {\n    var _a;\n    var _b = game.activePlayer, team = _b.team, index = _b.index;\n    var nextIndex = index[team] >= game.teams[team].length - 1 ? 0 : index[team] + 1;\n    return __assign(__assign({}, game), { activePlayer: {\n            team: team,\n            index: __assign(__assign({}, index), (_a = {}, _a[team] = nextIndex, _a)),\n        } });\n}\n// when entering active state\n// when skipping a turn (next player same team, reset time)\n// when end a turn (next player next team, reset time)\n// when \"GOT IT\" down to zero (same player, time provided)\nexport function nextTurn(game, timeRemaining) {\n    return __assign(__assign({}, game), { turns: {\n            active: {\n                isFresh: true,\n                paused: true,\n                timeRemaining: timeRemaining !== null && timeRemaining !== void 0 ? timeRemaining : game.settings.turnDuration,\n                activeCardId: \"\",\n                guessedCardIds: {},\n                skippedCardIds: {},\n            },\n            recap: {\n                team: game.activePlayer.team,\n                guessedCardIds: Object.keys(game.turns.active.guessedCardIds),\n                skippedCardCount: Object.keys(game.turns.active.skippedCardIds).length,\n            },\n        } });\n}\nexport function nextRound(game, timeRemaining) {\n    var nextRoundNumber = game.round.number + 1;\n    var nextPhase = nextRoundNumber > game.settings.numberOfRounds ? \"ended\" : game.phase;\n    return __assign(__assign({}, nextTurn(game, timeRemaining)), { round: {\n            number: nextRoundNumber,\n            guessedCardIds: {},\n        }, phase: nextPhase });\n}\nexport function drawNextCard(game, drawSeed, timeRemaining) {\n    var guessedCardIds = game.round.guessedCardIds;\n    var skippedCardIds = game.turns.active.skippedCardIds;\n    // the draw deck is  cards that have  not yet been  guessed or skipps\n    var drawCardIds = Object.keys(selectCards(game)).filter(function (cardId) { return !(guessedCardIds[cardId] || skippedCardIds[cardId]); });\n    var unguessedSkipCardIds = Object.keys(skippedCardIds).filter(function (cardId) { return !guessedCardIds[cardId]; });\n    var activeCardId = null;\n    if (drawCardIds.length > 0) {\n        // if there are draw cards left, pull randomly from the draw deck\n        activeCardId = drawCardIds[Math.floor(drawSeed * drawCardIds.length)];\n    }\n    else if (unguessedSkipCardIds.length > 0) {\n        // otherwise, if there are skip cards left, rotate through the unguessed skip deck\n        var nextIndex = unguessedSkipCardIds.indexOf(game.turns.active.activeCardId) + 1;\n        if (nextIndex > unguessedSkipCardIds.length - 1) {\n            nextIndex = 0;\n        }\n        activeCardId = unguessedSkipCardIds[nextIndex];\n    }\n    else {\n        // otherwise we are down to 0 - go to next round\n        return nextRound(game, timeRemaining);\n    }\n    return __assign(__assign({}, game), { turns: __assign(__assign({}, game.turns), { active: __assign(__assign({}, game.turns.active), { activeCardId: activeCardId }) }) });\n}\nexport function gotCard(game, cardId) {\n    var _a, _b;\n    // if the card we got was not the active card, ignore\n    if (cardId !== game.turns.active.activeCardId) {\n        return game;\n    }\n    // if the card has already been counted as guessed, ignore\n    if (game.round.guessedCardIds[cardId] != null) {\n        return game;\n    }\n    // add to guessed cards map, update score,\n    var team = game.activePlayer.team;\n    return __assign(__assign({}, game), { round: __assign(__assign({}, game.round), { guessedCardIds: __assign(__assign({}, game.round.guessedCardIds), (_a = {}, _a[cardId] = true, _a)) }), score: __assign(__assign({}, game.score), (_b = {}, _b[team] = game.score[team] + 1, _b)), turns: __assign({}, game.turns) });\n}\n","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { nextPlayerNextTeam, nextPlayerSameTeam, nextTurn, drawNextCard, } from \"./mutations\";\nimport { selectNumberOfPlayers } from \"./selectors\";\n/*\nFlow:\n\nRules\n- You set up state when you needed it\n\nGameplay events\n- Skip turn\n  - Only allowed if isFresh\n  - Update active player\n  - Reset turn state\n- Start Turn\n  -\n- Pause Turn\n- End Turn\n- Got card\n- Skip Card\n*/\nvar initialGame = {\n    gameCode: \"\",\n    phase: \"registration\",\n    playerCards: {},\n    activePlayer: {\n        team: \"orange\",\n        index: {\n            orange: 0,\n            blue: 0,\n        },\n    },\n    hostId: \"\",\n    players: {},\n    round: {\n        guessedCardIds: {},\n        number: 0,\n    },\n    score: {\n        orange: 0,\n        blue: 0,\n    },\n    settings: {\n        cardsPerPlayer: 3,\n        numberOfRounds: 3,\n        skipPenalty: -1,\n        turnDuration: 45,\n    },\n    teams: {\n        orange: [],\n        blue: [],\n    },\n    turns: {\n        active: {\n            activeCardId: \"\",\n            isFresh: true,\n            paused: true,\n            timeRemaining: 45,\n            guessedCardIds: {},\n            skippedCardIds: {},\n        },\n        recap: null,\n    },\n};\nfunction leaveGame(game, action) {\n    if (game.phase !== \"registration\") {\n        return game;\n    }\n    var playerId = action.payload.playerId;\n    var _a = game.players, _b = playerId, _ = _a[_b], players = __rest(_a, [typeof _b === \"symbol\" ? _b : _b + \"\"]);\n    return __assign(__assign({}, game), { players: players });\n}\nfunction joinGame(game, action) {\n    var _a;\n    var _b, _c;\n    if (game.phase !== \"registration\") {\n        return game;\n    }\n    var _d = action.payload, playerId = _d.playerId, name = _d.name;\n    var joinOrder = (_c = (_b = game.players[playerId]) === null || _b === void 0 ? void 0 : _b.joinOrder) !== null && _c !== void 0 ? _c : Math.max.apply(Math, Object.values(game.players).map(function (player) { return player.joinOrder; })) +\n        1;\n    return __assign(__assign({}, game), { players: __assign(__assign({}, game.players), (_a = {}, _a[playerId] = {\n            id: playerId,\n            name: name,\n            joinOrder: joinOrder,\n        }, _a)) });\n}\nfunction advanceFromRegistration(game, action) {\n    var _a = action.payload, teams = _a.teams, firstTeam = _a.firstTeam;\n    if (game.phase !== \"registration\") {\n        return game;\n    }\n    // requires at least 4 players\n    if (selectNumberOfPlayers(game) < 4) {\n        return game;\n    }\n    return __assign(__assign({}, game), { teams: teams, activePlayer: {\n            team: firstTeam,\n            index: { orange: 0, blue: 0 },\n        }, phase: \"writing\" });\n}\nfunction advanceFromWriting(game, action) {\n    if (game.phase !== \"writing\") {\n        return game;\n    }\n    // requires at least 1 player's cards to be submitted\n    if (Object.keys(game.playerCards).length < 1) {\n        return game;\n    }\n    return __assign(__assign({}, game), { phase: \"drafting\" });\n}\nfunction advanceFromDrafting(game, action) {\n    if (game.phase !== \"drafting\") {\n        return game;\n    }\n    // all players must be assigned to a team\n    var _a = game.teams, orange = _a.orange, blue = _a.blue;\n    if (orange.length < 2 || blue.length < 2) {\n        return game;\n    }\n    if (orange.length + blue.length !== selectNumberOfPlayers(game)) {\n        return game;\n    }\n    // initialize turn order state\n    return __assign(__assign({}, game), { phase: \"active\", round: {\n            number: 1,\n            guessedCardIds: {},\n        }, turns: {\n            active: {\n                activeCardId: \"\",\n                isFresh: true,\n                paused: true,\n                timeRemaining: game.settings.turnDuration,\n                guessedCardIds: {},\n                skippedCardIds: {},\n            },\n            recap: {\n                team: game.activePlayer.team,\n                guessedCardIds: [],\n                skippedCardCount: 0,\n            },\n        } });\n}\nexport function submitCards(game, action) {\n    var _a;\n    if (game.phase !== \"writing\") {\n        return game;\n    }\n    var _b = action.payload, playerId = _b.playerId, cards = _b.cards;\n    return __assign(__assign({}, game), { playerCards: __assign(__assign({}, game.playerCards), (_a = {}, _a[playerId] = cards, _a)) });\n}\nexport function setTeams(game, action) {\n    if (game.phase !== \"drafting\") {\n        return game;\n    }\n    var teams = action.payload.teams;\n    return __assign(__assign({}, game), { teams: teams });\n}\n/** GAMEPLAY ACTIONS */\nexport function skipTurn(game, action) {\n    if (game.phase !== \"active\") {\n        return game;\n    }\n    var active = game.turns.active;\n    if (!active.isFresh) {\n        return game;\n    }\n    return nextPlayerSameTeam(game);\n}\nexport function startTurn(game, action) {\n    if (game.phase !== \"active\") {\n        return game;\n    }\n    var drawSeed = action.payload.drawSeed;\n    if (game.turns.active.isFresh) {\n        game = drawNextCard(game, drawSeed, game.turns.active.timeRemaining);\n    }\n    return __assign(__assign({}, game), { round: __assign({}, game.round), turns: __assign(__assign({}, game.turns), { active: __assign(__assign({}, game.turns.active), { isFresh: false, paused: false }) }) });\n}\nexport function pauseTurn(game, action) {\n    if (game.phase !== \"active\") {\n        return game;\n    }\n    var timeRemaining = action.payload.timeRemaining;\n    return __assign(__assign({}, game), { round: __assign({}, game.round), turns: __assign(__assign({}, game.turns), { active: __assign(__assign({}, game.turns.active), { paused: true, timeRemaining: timeRemaining }) }) });\n}\nfunction gotCard(game, action) {\n    var _a, _b, _c;\n    if (game.phase !== \"active\") {\n        return game;\n    }\n    if (game.turns.active.paused) {\n        return game;\n    }\n    var _d = action.payload, cardId = _d.cardId, timeRemaining = _d.timeRemaining, drawSeed = _d.drawSeed;\n    // if the card we got was not the active card, ignore\n    if (cardId !== game.turns.active.activeCardId) {\n        return game;\n    }\n    // if the card has already been counted as guessed, ignore\n    if (game.round.guessedCardIds[cardId]) {\n        return game;\n    }\n    // add to guessed cards map, update score,\n    var team = game.activePlayer.team;\n    game = __assign(__assign({}, game), { \n        // update the score\n        score: __assign(__assign({}, game.score), (_a = {}, _a[team] = game.score[team] + 1, _a)), \n        // add the card id to the round and active turn (becomes recap)\n        round: __assign(__assign({}, game.round), { guessedCardIds: __assign(__assign({}, game.round.guessedCardIds), (_b = {}, _b[cardId] = true, _b)) }), turns: __assign(__assign({}, game.turns), { active: __assign(__assign({}, game.turns.active), { guessedCardIds: __assign(__assign({}, game.round.guessedCardIds), (_c = {}, _c[cardId] = true, _c)) }) }) });\n    game = drawNextCard(game, drawSeed, timeRemaining);\n    return game;\n}\nfunction skipCard(game, action) {\n    var _a, _b;\n    if (game.phase !== \"active\") {\n        return game;\n    }\n    if (game.turns.active.paused) {\n        return game;\n    }\n    var _c = action.payload, cardId = _c.cardId, drawSeed = _c.drawSeed;\n    var skippedCardIds = game.turns.active.skippedCardIds;\n    if (!skippedCardIds[cardId]) {\n        var team = game.activePlayer.team;\n        game = __assign(__assign({}, game), { score: __assign(__assign({}, game.score), (_a = {}, _a[team] = game.score[team] + game.settings.skipPenalty, _a)), turns: __assign(__assign({}, game.turns), { active: __assign(__assign({}, game.turns.active), { skippedCardIds: __assign(__assign({}, game.turns.active.skippedCardIds), (_b = {}, _b[cardId] = true, _b)) }) }) });\n    }\n    return drawNextCard(game, drawSeed, 0);\n}\nfunction endTurn(game, action) {\n    game = nextTurn(game);\n    return nextPlayerNextTeam(game);\n}\nfunction setSettings(game, action) {\n    return __assign(__assign({}, game), { settings: action.payload.settings });\n}\nexport function GameReducer(game, action) {\n    if (game === void 0) { game = initialGame; }\n    switch (action.type) {\n        // phase\n        case \"ADVANCE_FROM_REGISTRATION\":\n            return advanceFromRegistration(game, action);\n        case \"ADVANCE_FROM_WRITING\":\n            return advanceFromWriting(game, action);\n        case \"ADVANCE_FROM_DRAFTING\":\n            return advanceFromDrafting(game, action);\n        // admin\n        case \"SET_GAME_SETTINGS\":\n            return setSettings(game, action);\n        case \"JOIN_GAME\":\n            return joinGame(game, action);\n        case \"LEAVE_GAME\":\n            return leaveGame(game, action);\n        case \"SUBMIT_CARDS\":\n            return submitCards(game, action);\n        case \"SET_TEAMS\":\n            return setTeams(game, action);\n        // gameplay actions\n        case \"SKIP_TURN\":\n            return skipTurn(game, action);\n        case \"START_TURN\":\n            return startTurn(game, action);\n        case \"PAUSE_TURN\":\n            return pauseTurn(game, action);\n        case \"END_TURN\":\n            return endTurn(game, action);\n        case \"GOT_CARD\":\n            return gotCard(game, action);\n        case \"SKIP_CARD\":\n            return skipCard(game, action);\n        case \"SERVER_UPDATE_STATE\":\n            // TODO: merge state for cheaper updates\n            return action.payload;\n        // default\n        default:\n            return game;\n    }\n}\n"],"sourceRoot":""}